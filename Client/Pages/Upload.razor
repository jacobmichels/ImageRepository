@page "/upload"

@using Microsoft.Extensions.Logging;
@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.JSInterop;
@using ImageRepository.Shared;

@inject IJSRuntime JSRuntime
@inject ILogger<Upload> logger;
@inject IModalService ModalService
@inject HttpClient Http

<div class="text-center">
    <h1>Upload &#128228;</h1>
    <hr>
    <h3>Here is where you can upload images to your account!</h3>
    <hr>

    <AuthorizeView>
        <Authorized>
            <InputFile OnChange="@InputFileHandler" multiple>Select images from your computer> </InputFile>
            <button @onclick="UploadImages" class="@UploadButtonClass btn btn-primary">Upload images</button>
            <p id="file-error-output">@StatusText</p>
            <div class="spinner-border text-primary @SpinnerVisibility" role="status">
            </div>

            @if (Images.Count > 0)
            {
                <h4>Images</h4>
                <ImageGrid Images="@Images" ShowDelete="true" ShowEdit="true" ShowView="true"></ImageGrid>
            }
        </Authorized>
        <NotAuthorized>
            <h3>Sorry! To upload images you must be logged in. Please log in or create an account to continue.</h3>
        </NotAuthorized>
    </AuthorizeView>
</div>


@code {
    private string StatusText = "";

    private string UploadButtonClass = "";

    private string SpinnerVisibility = "invisible";

    private IList<Image> Images = new List<Image>();

    private ISet<string> SupportedFormats = new HashSet<string> { "image/png", "image/jpeg", "image/gif" };

    private async Task InputFileHandler(InputFileChangeEventArgs e)
    {
        Images.Clear();

        const int MaxAllowedFileCount = 10;

        if (e.FileCount > MaxAllowedFileCount)
        {
            logger.LogError($"Too many files uploaded. Maximum is {MaxAllowedFileCount}. Actual is {e.FileCount}");
            await JSRuntime.InvokeVoidAsync("alert", $"Too many files uploaded. Maximum is {MaxAllowedFileCount}. You tried to upload {e.FileCount}");
        }
        else
        {
            foreach (var image in e.GetMultipleFiles(MaxAllowedFileCount))
            {
                if (!SupportedFormats.Contains(image.ContentType))
                {
                    logger.LogError("At least one file selected is not an image. Skipping it.");
                    continue;
                }
                var resizedImage = await image.RequestImageFileAsync(image.ContentType, 300, 300);
                var resizedReadStream = resizedImage.OpenReadStream(10485760);
                var readStream = image.OpenReadStream(10485760);
                Image ImageObject = new Image();
                ImageObject.Title = image.Name;
                ImageObject.Data = new byte[image.Size];
                ImageObject.Caption = string.Empty;
                ImageObject.ContentType = image.ContentType;
                ImageObject.Private = true;
                await readStream.ReadAsync(ImageObject.Data);

                byte[] displayData = new byte[resizedImage.Size];
                await resizedReadStream.ReadAsync(displayData);
                ImageObject.Base64DisplayData =
                    $"data:{image.ContentType};base64,{Convert.ToBase64String(displayData)}";
                Images.Add(ImageObject);
                logger.LogInformation("Added image to list");
            }
        }
    }

    private async Task UploadImages()
    {
        if (Images.Count == 0)
        {
            StatusText = "No images selected to upload! Go select some and try again.";
            return;
        }
        SpinnerVisibility = "visible";
        HttpResponseMessage response = await Http.PostAsJsonAsync("/image",Images);
        if (!response.IsSuccessStatusCode)
        {
            StatusText = $"An error occured on the server while uploading: {await response.Content.ReadAsStringAsync()}";
            return;
        }
        StatusText = "Images successfully uploaded to server";
        Images.Clear();
        SpinnerVisibility = "invisible";
    }
}
